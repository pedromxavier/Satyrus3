-- S --
Program . Program ::= [Definition] [Constraint] Penalties ;

-- Definitions --
[]    . [Definition] ::= ;
(:)   . [Definition] ::= Definition ";" [Definition] ;

ExprAssignment    . Definition ::= Ident "=" Expr ;
StructDefinition . Definition ::= Ident "(" Dimensions ")" ;

ExprDimensions   . Dimensions ::= [Expr] ;
IntervDimensions . Dimensions ::= Domain ;

DomainNoAssrt . Domain ::= [Interval] ;
DomainAssrt   . Domain ::= [Interval] "and" [Assertion] ;

(:[]) . [Interval] ::= Interval ; 
(:)   . [Interval] ::= Interval "," [Interval] ;

Interval . Interval   ::= Ident "in" "(" Expr "," Expr ")" ;

(:[])      . [Assertion] ::= Assertion ; 
(:)        . [Assertion] ::= Assertion "," [Assertion] ;
EqAssert   . Assertion   ::= Ident "==" Iexpr ;
IneqAssert . Assertion   ::= Ident "!=" Iexpr ;

StructInitOnCode   . Definition ::= Ident "=" StructBody ; 
StructInitFromFile . Definition ::= Ident "from" String ; 
StructSetDefault   . Definition ::= Ident "default" Integer ;

StructBody . StructBody ::= "[" [Mapping] "]" ;

(:[]) . [Mapping] ::= Mapping ;
(:) .   [Mapping] ::= Mapping ";" [Mapping] ;

Mapping . Mapping ::= Key ":" Integer ;

NoParKey . Key ::=  [Integer] ;
ParKey   . Key ::= "(" [Integer] ")" ;

(:[]) . [Integer] ::= Integer ; 
(:)   . [Integer] ::= Integer "," [Integer] ; 

-- Constraints --
[]  . [Constraint] ::= ;
(:) . [Constraint] ::= Constraint ";" [Constraint] ;

-- Integrity contraints
IntConstraint . Constraint ::= "intgroup" Ident ":" ConstraintRHS ;
-- Optimality contraints
OptConstraint . Constraint ::= "optgroup" Ident ":" ConstraintRHS ;

ConstraintRHS . ConstraintRHS ::= Quantifiers Formulae ;

EmptyQuantf    . Quantifiers ::= ;
NonEmptyQuantf . Quantifiers ::= [Quantifier] ":" ;

(:[]) . [Quantifier] ::= Quantifier ;
(:)   . [Quantifier] ::= Quantifier ";" [Quantifier] ;

-- Quantifiers: forall{x,y,...} and exists{x,y,...}
Quantfor  . Quantifier ::= "forall" "{" [Ident] "}" "where" Domain ;
Quantexst . Quantifier ::= "exists" "{" [Ident] "}" "where" Domain ;

(:[]) . [Ident] ::= Ident ;
(:)   . [Ident] ::= Ident "," [Ident] ;

NoCoefClauses  . Formulae ::= WWF ;
IntCoefClauses . Formulae ::= Integer "(" WWF ")" ;
AtmCoefClauses . Formulae ::= Atom "(" WWF ")" ;

FormOr  . WWF  ::= WWF "or" WWF2 ;
FormAnd . WWF  ::= WWF "and" WWF2 ;
FormLI  . WWF2  ::= WWF2 "->" WWF3 ;
FormRI  . WWF2  ::= WWF2 "<-" WWF3 ;
FormEq  . WWF2  ::= WWF2 "<->" WWF3 ;
FormNot . WWF3 ::= "not" WWF4 ;
FormAtm . WWF4 ::= Atom ;

_. WWF  ::= WWF2 ;
_. WWF2 ::= WWF3 ;
_. WWF3 ::= WWF4 ;
_. WWF4 ::= "(" WWF ")" ;

AtomId . Atom ::= Ident ;
AtomSt . Atom ::= Ident [Index] ;

(:[]) . [Index] ::= Index ;
(:)   . [Index] ::= Index [Index] ;

Index . Index ::= "[" Iexpr "]" ;

(:[]) . [Expr] ::= Expr ; 
(:)   . [Expr] ::= Expr "," [Expr] ;

ExprPlus   . Expr  ::= Expr "+" Expr2 ;
ExprMinus  . Expr  ::= Expr "-" Expr2 ;
ExprTimes  . Expr2 ::= Expr2 "*" Expr3 ;
ExprDiv    . Expr2 ::= Expr2 "/" Expr3 ;
ExprNeg    . Expr3 ::= "-" Expr4 ;
ExprInt    . Expr4 ::= Integer ;
ExprId     . Expr4 ::= Ident ;

_. Expr  ::= Expr2 ;
_. Expr2 ::= Expr3 ;
_. Expr3 ::= Expr4 ;
_. Expr4 ::= "(" Expr ")" ;

IexprId  . Iexpr ::= Ident ;
IexprInt . Iexpr ::= Integer ;

-- Penalties --
Penalties . Penalties ::= "penalties" ":" [Penalty] ;

(:[]) . [Penalty] ::= Penalty ";" ;
(:)   . [Penalty] ::= Penalty ";" [Penalty] ;

Penalty . Penalty ::= Ident ":" "level" Integer "," "correlation" Integer;

-- Comments --
comment "//";
comment "/*" "*/";

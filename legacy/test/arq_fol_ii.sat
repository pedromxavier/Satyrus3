d = 6;
f = 3;

/* LITCOMP struct */
V = 1;
C = 2;

IN(d);
PROOF(d,d);
CB(d);
RES(d);
FCT(d);
INV(d);
EMPTY(d);
CBMAP(d,d);
ORIG(d);
PARENT(d,d,f);
NAMEVAR(d,d,d);
NAMELIT(d,d,d);
CLCOMP_LIT(d,d,d,2);
CLCOMP_VAR(d,d);
LITCOMP(d,d,d+1,2,d);
ILIT(d,d,d);
IVAR(d,d,d);
UNIF(d,d,d);
EQ(d,d);
UNIFF(d,d,d);
DEQ(d,d);
REQ(d,d);

/*
 * 1 - in proof contraints
 */
intgroup int0:
  forall{i} where i in (1,d):
    IN[i] -> CB[i] or RES[i] or FCT[i] or INV[i]; //a

intgroup int0:
  forall{i,j,k} where i in (1,d), j in (1,d), k in (1,3):
    IN[i] and not EMPTY[i] -> PARENT[i][j][k]; //b

/*
 * 2 - clause instance constraints
 */
intgroup int0:
  forall{i,j} where i in (1,d), j in (1,d):
    CB[i] -> CBMAP[i][j]; //a

intgroup int0:
  forall{i,j} where i in (1,d), j in (1,d):
    CB[i] and CBMAP[i][j] -> ORIG[j]; //b

intgroup int0:
  forall{i,j} where i in (1,d), j in (1,d):
    ORIG[j] and CBMAP[i][j] -> ORIG[j]; //b'

/* 
 * 3 - clause syntax constraints 
 */
intgroup int0:
  forall{i,j,k,l,m,p,s} where i in (1,d), j in (1,d), k in (1,d), l in (1,d),
                              m in (1,d), p in (1,d), s in (1,2):
    CBMAP[i][j] and CLCOMP_LIT[j][k][p][s] and NAMELIT[j][k][l] and
    ILIT[i][l][m] -> PROOF[i][m]; //a

intgroup int0:
  forall{i,j,k,l,m,p,s} where i in (1,d), j in (1,d), k in (1,d), l in (1,d),
                              m in (1,d), p in (1,d), s in (1,2):
    CBMAP[i][j] and PROOF[i][m] -> 
      CLCOMP_LIT[j][k][p][s] and NAMELIT[j][k][l] and ILIT[l][m][i]; //b

intgroup int0:
  forall{i,j,k,l,m,p,s} where i in (1,d), j in (1,d), k in (1,d), l in (1,d),
                              m in (1,d), p in (1,d), s in (1,2):
    CBMAP[i][j] and CLCOMP_LIT[j][k][p][s] -> 
      NAMELIT[j][k][l] and ILIT[i][l][m]; //c

intgroup int0:
  forall{i,j,k,l,p,s} where i in (1,d), j in (1,d), k in (1,d), l in (1,d),
                            p in (1,d), s in (1,2):
    CBMAP[i][j] and not CLCOMP_LIT[j][k][p][s] -> not NAMELIT[j][k][l]; //d

intgroup int0:
  forall{i,j,l,m} where i in (1,d), j in (1,d), l in (1,d), m in (1,d):
    not CBMAP[i][j] -> not ILIT[i][l][m]; //e

/*
 * 4 - term syntax constraints
 */
intgroup int0:
  forall{i,j,k,l,m} where i in (1,d), j in (1,d), k in (1,3), l in (1,d), 
                          m in (1,d):
    CBMAP[i][j] and CLCOMP_VAR[j][k] -> NAMEVAR[j][k][l] and IVAR[l][m][i]; //a

/*
 * 5 - resolution step contraints
 */
intgroup int0:
  forall{i,j,k} where i in (1,d), j in (1,d), k in (1,2):
    RES[i] -> PARENT[j][i][k]; //a

intgroup int0:
  forall{i,j,k} where i in (1,d), j in (1,d), k in (1,2):
    not RES[i] -> not PARENT[j][i][k]; //b

/*
 * 6 - parent line contraints
 */
intgroup int0:
  forall{i,j,k,l} where i in (1,d), j in (1,d), k in (1,3), 
                        l in (1,3) and k != l:
    PARENT[j][i][k] -> not PARENT[j][i][l]; //a

intgroup int0:
  forall{i,j,k,l,m,n,p} where i in (1,d), j in (1,d), k in (1,d), l in (1,2),
                              m in (1,2), n in (1,d) and j != k, l != m, n < p:
    PARENT[j][i][l] and PARENT[k][i][m] ->
      UNIF[n][p][i] and PROOF[j][n] and PROOF[k][p]; //b

/*
 * 7 - resolvent composition constraints
 */
intgroup int0:
  forall{i,j,k,l,m} where i in (1,d), j in (1,d), k in (1,d), l in (1,2), 
                          m in (1,d) and k < m:
    PARENT[j][i][l] and PROOF[j][k] and not UNIF[k][m][i] -> PROOF[i][k]; //a

intgroup int0:
  forall{i,j,k,l,m} where i in (1,d), j in (1,d), k in (1,d), l in (1,2), 
                          m in (1,d) and m < k:
    PARENT[j][i][l] and PROOF[j][k] and not UNIF[m][k][i] -> PROOF[i][k]; //b

intgroup int0:
  forall{i,j,k,l,m,n} where i in (1,d), j in (1,d), k in (1,d), l in (1,d), 
                            m in (1,2), n in (1,2) and j != k, m != n:
    PARENT[j][i][m] and PARENT[k][i][n] and not PROOF[j][l] and not PROOF[k][l]
      -> not PROOF[i][l]; //c

intgroup int0:
  forall{i,j,k} where i in (1,d), j in (1,d), k in (1,2) and i < j:
    UNIF[i][j][k] -> not PROOF[i][k] and not PROOF[j][k]; //d

/*
 * 8 - factoring step constraints
 */
intgroup int0:
  forall{i,j} where i in (1,d), j in (1,d):
    FCT[i] -> PARENT[j][i][f]; //a

intgroup int0:
  forall{i,j} where i in (1,d), j in (1,d):
    not FCT[i] -> not PARENT[j][i][f]; //b

/*
 * 9 - factored line contraints
 */
intgroup int0:
  forall{i,j,k,l} where i in (1,d), j in (1,d), k in (1,d), 
                        l in (1,d) and k < l:
    PARENT[j][i][f] -> UNIFF[k][l][i] and PROOF[j][k] and PROOF[j][l]; //a

/*
 * 10 - factor composition constraints
 */
intgroup int0:
  forall{i,j,k,l,m} where i in (1,d), j in (1,d), k in (1,d), l in (1,2), 
                          m in (1,d) and k < m:
    PARENT[j][i][f] and PROOF[j][k] and not UNIFF[l][k][i] -> PROOF[i][k]; //a

intgroup int0:
  forall{i,j,k} where i in (1,d), j in (1,d), k in (1,3):
    PARENT[j][i][f] and not PROOF[j][k] -> not PROOF[i][k]; //b

intgroup int0:
  forall{i,j,k} where i in (1,d), j in (1,d), k in (1,3) and i < j:
    UNIFF[i][j][k] -> not PROOF[j][k]; //c

/*
 * 11 - unification constraints
 */
intgroup int0:
  forall{i,j,k,l,m,n,o,p,a,b,d} where i in (1,d), j in (1,d), k in (1,d), 
                                      l in (1,d), m in (1,d), n in (1,d), 
                                      o in (1,d), p in (1,d), a in (1,d),
                                      b in (1,d), d in (1,d) and i < j:
    UNIF[i][j][k] and ILIT[l][n][i] and ILIT[m][o][j] and NAMELIT[a][b][n] and
    NAMELIT[c][d][o] -> 
      (CLCOMP_LIT[a][b][p][plus] and CLCOMP_LIT[c][d][p][minus]) or 
      (CLCOMP_LIT[a][b][p][minus] and CLCOMP_LIT[c][d][p][plus]); //a
      
intgroup int0:
  forall{i,j,k,l,n,o,p,a,b,d} where i in (1,d), j in (1,d), k in (1,d), 
                                    l in (1,d), n in (1,d), o in (1,d), 
                                    p in (1,d), a in (1,d), b in (1,d), 
                                    d in (1,d) and i < j:
    UNIFF[i][j][k] and ILIT[l][n][i] and ILIT[l][o][j] and NAMELIT[a][b][n] and
    NAMELIT[a][d][o] -> 
      (CLCOMP_LIT[a][b][p][plus] and CLCOMP_LIT[a][d][p][plus]) or 
      (CLCOMP_LIT[a][b][p][minus] and CLCOMP_LIT[a][d][p][minus]); //b

/*
 * 12 - term substitution constraints
 */
intgroup int0:
  forall{i,j,k,l,m,n,o,x,y,w,z,a,b,c,d,e,f,g} 
    where i in (1,d), j in (1,d), k in (1,d), l in (1,d), m in (1,d), 
    n in (1,d), o in (1,d), x in (1,d), y in (1,d), w in (1,d), z in (1,d),
    a in (1,d), b in (1,d), c in (1,d), d in (1,d), e in (1,d), f in (1,d),
    g in (1,d) and i < j:
      UNIF[i][j][k] and ILIT[l][n][i] and ILIT[m][o][j] and 
      NAMELIT[a][b][n] and NAMELIT[c][d][o] and LITCOMP[a][b][e][V][f] and
      LITCOMP[c][d][g][V][f] and NAMEVAR[a][e][x] and NAMEVAR[c][g][y] and
      IVAR[x][w][l] and IVAR[y][z][m] -> DEQ[w][z]; //a

intgroup int0:
  forall{a,b,c} where a in (1,d), b in (1,d), c in (1,d):
    not LITCOMP[a][b][d+1][V][c]; //a'

intgroup int0:
  forall{i,j,k,l,m,n,o,x,y,w,z,a,b,c,d,e,f,g} 
    where i in (1,d), j in (1,d), k in (1,d), l in (1,d), m in (1,d), 
    n in (1,d), o in (1,d), x in (1,d), y in (1,d), w in (1,d), z in (1,d),
    a in (1,d), b in (1,d), c in (1,d), d in (1,d), e in (1,d), f in (1,d),
    g in (1,d) and i < j:
      UNIFF[i][j][k] and ILIT[l][n][i] and ILIT[l][o][j] and 
      NAMELIT[a][b][n] and NAMELIT[a][d][o] and LITCOMP[a][b][e][V][f] and
      LITCOMP[a][d][g][V][f] and NAMEVAR[a][e][x] and NAMEVAR[a][g][y] and
      IVAR[l][x][w] and IVAR[l][y][z] -> DEQ[w][z]; //b

intgroup int0:
  forall{i,j,k,l,m,n,o,x,y,w,z,a,b,c,d,e,f,g} 
    where i in (1,d), j in (1,d), k in (1,d), l in (1,d), m in (1,d), 
    n in (1,d), o in (1,d), x in (1,d), y in (1,d), w in (1,d), z in (1,d),
    a in (1,d), b in (1,d), c in (1,d), d in (1,d), e in (1,d), f in (1,d),
    g in (1,d) and i < j:
      UNIF[i][j][k] and ILIT[l][n][i] and ILIT[m][o][j] and 
      NAMELIT[a][b][n] and NAMELIT[c][d][o] and LITCOMP[a][b][e][V][f] and
      LITCOMP[c][d][g][C][f] and NAMEVAR[a][e][x] and IVAR[l][x][w] -> 
        REQ[w][g]; //c

intgroup int0:
  forall{i,j,k,l,m,n,o,x,y,w,z,a,b,c,d,e,f,g} 
    where i in (1,d), j in (1,d), k in (1,d), l in (1,d), m in (1,d), 
    n in (1,d), o in (1,d), x in (1,d), y in (1,d), w in (1,d), z in (1,d),
    a in (1,d), b in (1,d), c in (1,d), d in (1,d), e in (1,d), f in (1,d),
    g in (1,d) and i < j:
      UNIF[i][j][k] and ILIT[l][n][i] and ILIT[m][o][j] and 
      NAMELIT[a][b][n] and NAMELIT[c][d][o] and LITCOMP[a][b][g][C][f] and
      LITCOMP[c][d][e][V][f] and NAMEVAR[c][e][x] and IVAR[m][x][w] -> 
        REQ[w][g]; //c'

intgroup int0:
  forall{i,j,k,l,m,n,o,x,y,w,z,a,b,c,d,e,f,g} 
    where i in (1,d), j in (1,d), k in (1,d), l in (1,d), m in (1,d), 
    n in (1,d), o in (1,d), x in (1,d), y in (1,d), w in (1,d), z in (1,d),
    a in (1,d), b in (1,d), c in (1,d), d in (1,d), e in (1,d), f in (1,d),
    g in (1,d) and i < j:
      UNIFF[i][j][k] and ILIT[l][n][i] and ILIT[l][o][j] and 
      NAMELIT[a][b][n] and NAMELIT[a][d][o] and LITCOMP[a][b][e][V][f] and
      LITCOMP[a][d][g][C][f] and NAMEVAR[a][e][x] and IVAR[l][x][w] -> 
        REQ[w][g]; //d

intgroup int0:
  forall{i,j,k,l,m,n,o,x,y,w,z,a,b,c,d,e,f,g} 
    where i in (1,d), j in (1,d), k in (1,d), l in (1,d), m in (1,d), 
    n in (1,d), o in (1,d), x in (1,d), y in (1,d), w in (1,d), z in (1,d),
    a in (1,d), b in (1,d), c in (1,d), d in (1,d), e in (1,d), f in (1,d),
    g in (1,d) and i < j:
      UNIFF[i][j][k] and ILIT[l][n][i] and ILIT[l][o][j] and 
      NAMELIT[a][b][n] and NAMELIT[a][d][o] and LITCOMP[a][b][g][C][f] and
      LITCOMP[a][d][e][V][f] and NAMEVAR[a][e][x] and IVAR[l][x][w] -> 
        REQ[w][g]; //d'

intgroup int0:
  forall{i,j,k,l,m,n,o,a,b,c,d,e,f,g} 
    where i in (1,d), j in (1,d), k in (1,d), l in (1,d), m in (1,d), 
    n in (1,d), o in (1,d), a in (1,d), b in (1,d), c in (1,d), d in (1,d), 
    e in (1,d), f in (1,d), g in (1,d) and i < j:
      UNIF[i][j][k] and ILIT[l][n][i] and ILIT[m][o][j] and 
      NAMELIT[a][b][n] and NAMELIT[c][d][o] -> 
        (LITCOMP[a][b][e][C][f] -> 
          (LITCOMP[c][d][e][C][f] or LITCOMP[c][d][g][V][f])); //e

intgroup int0:
  forall{i,j,k,l,m,n,o,a,b,c,d,e,f,g} 
    where i in (1,d), j in (1,d), k in (1,d), l in (1,d), m in (1,d), 
    n in (1,d), o in (1,d), a in (1,d), b in (1,d), c in (1,d), d in (1,d), 
    e in (1,d), f in (1,d), g in (1,d) and i < j:
      UNIF[i][j][k] and ILIT[l][n][i] and ILIT[m][o][j] and 
      NAMELIT[a][b][n] and NAMELIT[c][d][o] -> 
        (LITCOMP[c][d][g][C][f] -> 
          (LITCOMP[a][b][g][C][f] or LITCOMP[a][b][e][V][f])); //e'

intgroup int0:
  forall{i,j,k,l,m,n,o,a,b,c,e,f,g,h} 
    where i in (1,d), j in (1,d), k in (1,d), l in (1,d), m in (1,d), 
    n in (1,d), o in (1,d), a in (1,d), b in (1,d), c in (1,d),  
    e in (1,d), f in (1,d), g in (1,d), h in (1,d) and i < j:
      UNIF[i][j][k] and ILIT[l][n][i] and ILIT[m][o][j] and 
      NAMELIT[a][b][n] and NAMELIT[c][h][o] -> 
        (LITCOMP[c][h][d+1][C][f] <-> LITCOMP[a][b][d+1][C][f]); //e''

intgroup int0:
  forall{i,j,k,l,n,o,a,b,d,e,f,g} 
    where i in (1,d), j in (1,d), k in (1,d), l in (1,d),  
    n in (1,d), o in (1,d), a in (1,d), b in (1,d),
    e in (1,d), f in (1,d), g in (1,d) and i < j:
      UNIFF[i][j][k] and ILIT[l][n][i] and ILIT[l][o][j] and 
      NAMELIT[a][b][n] and NAMELIT[a][d][o] -> 
        (LITCOMP[a][b][e][C][f] -> 
          (LITCOMP[a][d][e][C][f] or LITCOMP[a][d][g][V][f])); //f

intgroup int0:
  forall{i,j,k,l,n,o,a,b,d,e,f,g} 
    where i in (1,d), j in (1,d), k in (1,d), l in (1,d),  
    n in (1,d), o in (1,d), a in (1,d), b in (1,d), d in (1,d),
    e in (1,d), f in (1,d), g in (1,d) and i < j:
      UNIFF[i][j][k] and ILIT[l][n][i] and ILIT[l][o][j] and 
      NAMELIT[a][b][n] and NAMELIT[a][d][o] -> 
        (LITCOMP[a][d][g][C][f] -> 
          (LITCOMP[a][b][g][C][f] or LITCOMP[a][b][e][V][f])); //f'

intgroup int0:
  forall{i,j,k,l,n,o,a,b,e,f,g,h} 
    where i in (1,d), j in (1,d), k in (1,d), l in (1,d),  
    n in (1,d), o in (1,d), a in (1,d), b in (1,d), h in (1,d),
    e in (1,d), f in (1,d), g in (1,d) and i < j:
      UNIFF[i][j][k] and ILIT[l][n][i] and ILIT[l][o][j] and 
      NAMELIT[a][b][n] and NAMELIT[a][h][o] -> 
        (LITCOMP[a][h][d+1][C][f] <-> LITCOMP[a][b][d+1][C][f]); //f''

intgroup int0:
  forall{r,s,k} where r in (1,d), s in (1,d), k in (1,d):
    DEQ[r][s] -> (REQ[r][k] <-> REQ[s][k]); //g

intgroup int0:
  forall{r,s} where r in (1,d), s in (1,d):
    DEQ[r][s] <-> DEQ[s][r]; //g'

/*
 * 13 - empty clause constraints
 */
intgroup int0:
  forall{i,j} where i in (1,d), j in (1,d):
    EMPTY[i] -> not PROOF[i][j]; //a

intgroup int0:
  forall{i,j} where i in (1,d), j in (1,d):
    PROOF[i][j] -> not EMPTY[i]; //b

intgroup int0:
  forall{i} where i in (1,d):
    EMPTY[i] -> RES[i]; //c

/*
 * 14 - clause-invention constraints
 */
intgroup int0:
  forall{i,j} where i in (1,d), j in (1,d):
    INV[i] -> CBMAP[i][j]; //a

intgroup int0:
  forall{i,j} where i in (1,d), j in (1,d):
    (not CB[i] and not INV[i]) -> not CBMAP[i][j]; //a

/*
 * 15 - wta constraints
 */
intgroup wta:
  forall{i} where i in (1,d):
    CB[i] -> not RES[i]; //a

intgroup wta:
  forall{i} where i in (1,d):
    CB[i] -> not FCT[i]; //a

intgroup wta:
  forall{i} where i in (1,d):
    RES[i] -> not CB[i]; //a

intgroup wta:
  forall{i} where i in (1,d):
    CB[i] -> not FCT[i]; //a

intgroup wta:
  forall{i} where i in (1,d):
    FCT[i] -> not CB[i]; //a

intgroup wta:
  forall{i} where i in (1,d):
    FCT[i] -> not RES[i]; //a

intgroup wta:
  forall{i,j,k} where i in (1,d), j in (1,d), k in (1,d) and j != k:
    CBMAP[i][j] -> not CBMAP[i][k]; //b

intgroup wta:
  forall{i,j,k,l} where i in (1,d), j in (1,d), k in (1,d), l in (1,3) and 
  k != j:
    PARENT[j][i][l] -> not PARENT[k][i][l]; //c

intgroup wta:
  forall{i,j,n,k,l} where i in (1,d), j in (1,d), k in (1,3), l in (1,3),
                          n in (1,d) and i != n:
    PARENT[j][i][k] -> not PARENT[j][n][l]; //d

/* TODO finish wta constraints */

penalties:
  int0: level 0, correlation 1;
  wta:  level 1, correlation 1;
